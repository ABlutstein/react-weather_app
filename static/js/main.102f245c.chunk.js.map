{"version":3,"sources":["components/weather/Weather.forecast.js","App.js","serviceWorker.js","index.js"],"names":["Weather","state","lat","lon","city","tempCelcius","tempFahrenheit","icon","description","country","errorMessage","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","latitude","longitude","a","fetch","api_call","json","data","setState","name","weather","Math","round","main","temp","sys","this","then","position","coords","catch","err","message","timerID","setInterval","clearInterval","className","src","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console"],"mappings":"gRA8FeA,G,kNA1FbC,MAAQ,CACNC,IAAK,GACLC,IAAK,GACLC,KAAM,GACNC,YAAa,GACbC,eAAgB,GAChBC,KAAM,GACNC,YAAa,GACbC,QAAS,GACTC,aAAc,I,EAGhBC,YAAc,WACZ,OAAO,IAAIC,SAAQ,SAASC,EAASC,GACnCC,UAAUC,YAAYC,mBAAmBJ,EAASC,O,EAItDI,W,uCAAa,WAAOC,EAAUC,GAAjB,iBAAAC,EAAA,sEACYC,MAAM,iDAAD,OACuBH,EADvB,gBACuCC,EADvC,yDADjB,cACLG,EADK,gBAIQA,EAASC,OAJjB,OAILC,EAJK,OAKX,EAAKC,SAAS,CACZxB,IAAKiB,EACLhB,IAAKiB,EACLhB,KAAMqB,EAAKE,KACXnB,YAAaiB,EAAKG,QAAQ,GAAGpB,YAC7BH,YAAawB,KAAKC,MAAML,EAAKM,KAAKC,MAClC1B,eAAgBuB,KAAKC,MAAuB,IAAjBL,EAAKM,KAAKC,KAAa,IAClDzB,KAAMkB,EAAKG,QAAQ,GAAGrB,KACtBE,QAASgB,EAAKQ,IAAIxB,UAbT,2C,0HAiBQ,IAAD,OAClByB,KAAKvB,cACFwB,MAAK,SAAAC,GACJ,EAAKlB,WAAWkB,EAASC,OAAOlB,SAAUiB,EAASC,OAAOjB,cAE3DkB,OAAM,SAAAC,GACL,EAAKb,SAAS,CAAEhB,aAAc6B,EAAIC,aAGtCN,KAAKO,QAAUC,aACb,kBAAM,EAAKxB,WAAW,EAAKjB,MAAMC,IAAK,EAAKD,MAAME,OACjD,O,6CAKFwC,cAAcT,KAAKO,W,+BAGX,IAAD,EAQHP,KAAKjC,MANPG,EAFK,EAELA,KACAC,EAHK,EAGLA,YACAC,EAJK,EAILA,eACAC,EALK,EAKLA,KACAC,EANK,EAMLA,YACAC,EAPK,EAOLA,QAEF,OAAIL,EAEA,yBAAKwC,UAAU,OACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,gBAAgBxC,GAC/B,yBAAKwC,UAAU,gBACZvC,EADH,UACuB,0BAAMuC,UAAU,SAAhB,KAAiC,IACrDtC,EAFH,UAIA,yBAAKsC,UAAU,gBAAgBpC,GAC/B,6BACE,yBACEoC,UAAU,eACVC,IAAG,sCAAiCtC,EAAjC,WACHuC,IAAI,kBAGR,yBAAKF,UAAU,mBAAmBnC,KAKjC,uE,GAtFSsC,c,MCkBPC,MAjBf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,2DACA,kDAEF,yBAAKA,UAAU,YACb,8BACE,kBAAC,EAAD,OAEF,gECHYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB3C,WACrBA,UAAU4C,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLC,QAAQD,MAAMA,EAAMvB,a","file":"static/js/main.102f245c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Weather.css\";\n\nclass Weather extends Component {\n  state = {\n    lat: \"\",\n    lon: \"\",\n    city: \"\",\n    tempCelcius: \"\",\n    tempFahrenheit: \"\",\n    icon: \"\",\n    description: \"\",\n    country: \"\",\n    errorMessage: \"\"\n  };\n\n  getPosition = () => {\n    return new Promise(function(resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  };\n\n  getWeather = async (latitude, longitude) => {\n    const api_call = await fetch(\n      `//api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=3f24b2bf14e436852ff873111d6e8a0d&units=metric`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: latitude,\n      lon: longitude,\n      city: data.name,\n      description: data.weather[0].description,\n      tempCelcius: Math.round(data.main.temp),\n      tempFahrenheit: Math.round(data.main.temp * 1.8 + 32),\n      icon: data.weather[0].icon,\n      country: data.sys.country\n    });\n  };\n\n  componentDidMount() {\n    this.getPosition()\n      .then(position => {\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      })\n      .catch(err => {\n        this.setState({ errorMessage: err.message });\n      });\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      60000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    const {\n      city,\n      tempCelcius,\n      tempFahrenheit,\n      icon,\n      description,\n      country\n    } = this.state;\n    if (city) {\n      return (\n        <div className=\"App\">\n          <div className=\"weather-box\">\n            <div className=\"weather-city\">{city}</div>\n            <div className=\"weather-temp\">\n              {tempCelcius} &deg;C <span className=\"slash\">/</span>{\" \"}\n              {tempFahrenheit} &deg;F\n            </div>\n            <div className=\"weather-desc\">{description}</div>\n            <div>\n              <img\n                className=\"weather-icon\"\n                src={`//openweathermap.org/img/wn/${icon}@2x.png`}\n                alt=\"weather icon\"\n              />\n            </div>\n            <div className=\"weather-country\">{country}</div>\n          </div>\n        </div>\n      );\n    } else {\n      return <div>Please be patient while loading...</div>;\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport Weather from \"./components/weather/Weather.forecast\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Weather App milestone</h1>\n        <p>By Aaron Blutstein</p>\n      </header>\n      <div className=\"App-main\">\n        <main>\n          <Weather />\n        </main>\n        <footer>Aaron Blutstein Â© 2020</footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}